# -*- coding: utf-8 -*-
"""code1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yc4mGP4iZ3M50l0_Cpw1thFS8B4EJb3o
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('Karnataka_FlashDrought_Cleaned[1].csv')
df.info()

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Drop unnecessary columns
df = df.drop(columns=['.geo', 'system:index', 'dataset', 'ADM0_NAME', 'ADM1_NAME', 'ADM2_CODE', 'ADM0_CODE', 'ADM1_CODE', 'STATUS', 'DISP_AREA'], errors='ignore')

# Convert week_start to datetime and extract useful time-based features
df['week_start'] = pd.to_datetime(df['week_start'], errors='coerce')
df['month'] = df['week_start'].dt.month
df['week'] = df['week_start'].dt.isocalendar().week

# Create binary target: is_drought (1 if precipitation < 0.1, else 0)
df['is_drought'] = (df['precipitation'] < 0.1).astype(int)

# Encode ADM2_NAME (district) as a numeric label
le = LabelEncoder()
df['ADM2_NAME'] = le.fit_transform(df['ADM2_NAME'])

# Drop any remaining rows with missing data (if any)
df = df.dropna()

from sklearn.model_selection import train_test_split

# Features and target
X = df[['ADM2_NAME', 'precipitation', 'mean', 'Shape_Area', 'Shape_Leng', 'month', 'week']]
y = df['is_drought']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

import joblib

# Save the model to a file
joblib.dump(model, 'flash_drought_model.pkl')